name: Deploy on Dev Push

on:
  push:
    branches:
      - dev  # 仅在 dev 分支有新提交时触发

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. 检出代码
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # 获取完整的提交历史

      # 2. 设置 Node.js 环境
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18  # 根据项目需求指定 Node.js 版本

      # 3. 安装依赖
      - name: Install dependencies
        run: npm install

      # 4. 打包项目
      - name: Build project
        run: npm run build

      # 5. 检查是否成功生成 dist 目录
      - name: Check dist directory
        run: |
          if [ ! -d "dist" ]; then
            echo "Error: dist directory not found. Build failed."
            exit 1
          fi

      # 6. 生成唯一的临时分支名称
      - name: Generate temporary branch name
        id: temp-branch
        run: |
          TEMP_BRANCH="temp-deploy-$(date +%s)"
          echo "::set-output name=temp_branch::$TEMP_BRANCH"

      # 7. 检查临时分支是否存在，如果存在则删除
      - name: Delete existing temporary branch
        run: |
          if git show-ref --quiet refs/heads/"${{ steps.temp-branch.outputs.temp_branch }}"; then
            echo "Deleting existing temporary branch..."
            git branch -D "${{ steps.temp-branch.outputs.temp_branch }}"
          fi

      # 8. 创建一个临时分支用于部署
      - name: Create temporary branch
        run: |
          git checkout --orphan "${{ steps.temp-branch.outputs.temp_branch }}"
          git reset --hard

      # 9. 清空当前目录（除了 .git、dist 和 node_modules 目录）
      - name: Clean current directory
        run: |
          find . -mindepth 1 -maxdepth 1 ! -name '.git' ! -name 'dist' ! -name 'node_modules' -exec rm -rf {} +

      # 10. 创建 .gitignore 文件，屏蔽 node_modules 和 dist 等目录
      - name: Create .gitignore file
        run: |
          cat <<EOL > .gitignore
          # Ignore node_modules and dist directories
          node_modules/
          dist/

          # Ignore other build artifacts
          *.log
          *.tmp
          .DS_Store
          EOL

      # 11. 将 dist 目录中的内容复制到当前目录
      - name: Copy dist contents
        run: |
          cp -r dist/* .

      # 12. 配置 Git 用户信息
      - name: Configure Git user information
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      # 13. 提交更改
      - name: Commit changes
        run: |
          git add .
          if ! git commit -m "Deploy: Update main branch with latest build"; then
            echo "Error: Failed to commit changes."
            exit 1
          fi

      # 14. 推送临时分支并创建 Pull Request
      - name: Push temporary branch and create PR
        run: |
          git remote set-url origin https://${{ secrets.GH_TOKEN }}@github.com/${{ github.repository }}.git
          git push origin "${{ steps.temp-branch.outputs.temp_branch }}"
          gh pr create --base main --head "${{ steps.temp-branch.outputs.temp_branch }}" --title "Deploy: Update main branch with latest build" --body "Automated deployment of the latest build."
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}

      # 15. 切换回 dev 分支
      - name: Switch back to dev branch
        run: |
          git checkout dev

      # 16. 删除临时分支
      - name: Delete temporary branch
        run: |
          git branch -D "${{ steps.temp-branch.outputs.temp_branch }}"

      # 17. 完成部署
      - name: Complete deployment
        run: |
          echo "Deployment to origin/main completed successfully!"
